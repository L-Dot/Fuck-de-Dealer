# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fuckDD.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from game_setup import Game
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
import random

class Ui_FuckdeDealer(object):
    def __init__(self):
        self.round_bool = True

    def setupUi(self, FuckdeDealer):
        FuckdeDealer.setObjectName("FuckdeDealer")
        FuckdeDealer.resize(976, 753)
        self.centralwidget = QtWidgets.QWidget(FuckdeDealer)
        self.centralwidget.setObjectName("centralwidget")
        self.fuckdedealertitle = QtWidgets.QLabel(self.centralwidget)
        self.fuckdedealertitle.setGeometry(QtCore.QRect(30, 10, 531, 51))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(30)
        self.fuckdedealertitle.setFont(font)
        self.fuckdedealertitle.setObjectName("fuckdedealertitle")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(30, 390, 701, 71))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.button_Start = QtWidgets.QPushButton(self.centralwidget, clicked = lambda : self.pressed_it('Start'))
        self.button_Start.setGeometry(750, 490, 191, 41)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.button_Start.setFont(font)
        self.button_Start.setObjectName("button_Start")
        self.button_Exit = QtWidgets.QPushButton(self.centralwidget, clicked = lambda : self.pressed_it('Exit'))
        self.button_Exit.setGeometry(750, 20, 191, 41)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.button_Exit.setFont(font)
        self.button_Exit.setObjectName("button_Exit")
        self.button_Auto = QtWidgets.QPushButton(self.centralwidget, clicked = lambda : self.pressed_it('Auto'))
        self.button_Auto.setGeometry(670, 40, 71, 20)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.button_Auto.setFont(font)
        self.button_Auto.setObjectName("button_Auto")
        self.button_Stop = QtWidgets.QPushButton(self.centralwidget, clicked = lambda : self.pressed_it('Stop'))
        self.button_Stop.setGeometry(670, 20, 71, 20)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.button_Stop.setFont(font)
        self.button_Stop.setEnabled(False)
        self.button_Stop.setObjectName("button_Stop")
        self.button_A = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('Ace'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_A.setFont(font)
        self.button_A.setEnabled(False)
        self.button_A.setObjectName("button_A")
        self.horizontalLayout.addWidget(self.button_A)
        self.button_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('2'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_2.setFont(font)
        self.button_2.setEnabled(False)
        self.button_2.setObjectName("button_2")
        self.horizontalLayout.addWidget(self.button_2)
        self.button_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('3'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_3.setFont(font)
        self.button_3.setEnabled(False)
        self.button_3.setObjectName("button_3")
        self.horizontalLayout.addWidget(self.button_3)
        self.button_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('4'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_4.setFont(font)
        self.button_4.setEnabled(False)
        self.button_4.setObjectName("button_4")
        self.horizontalLayout.addWidget(self.button_4)
        self.button_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('5'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_5.setFont(font)
        self.button_5.setEnabled(False)
        self.button_5.setObjectName("button_5")
        self.horizontalLayout.addWidget(self.button_5)
        self.button_6 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('6'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_6.setFont(font)
        self.button_6.setEnabled(False)
        self.button_6.setObjectName("button_6")
        self.horizontalLayout.addWidget(self.button_6)
        self.button_7 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('7'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_7.setFont(font)
        self.button_7.setEnabled(False)
        self.button_7.setObjectName("button_7")
        self.horizontalLayout.addWidget(self.button_7)
        self.button_8 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('8'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_8.setFont(font)
        self.button_8.setEnabled(False)
        self.button_8.setObjectName("button_8")
        self.horizontalLayout.addWidget(self.button_8)
        self.button_9 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('9'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_9.setFont(font)
        self.button_9.setEnabled(False)
        self.button_9.setObjectName("button_9")
        self.horizontalLayout.addWidget(self.button_9)
        self.button_10 = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('10'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_10.setFont(font)
        self.button_10.setEnabled(False)
        self.button_10.setObjectName("button_10")
        self.horizontalLayout.addWidget(self.button_10)
        self.button_J = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('Jack'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_J.setFont(font)
        self.button_J.setEnabled(False)
        self.button_J.setObjectName("button_J")
        self.horizontalLayout.addWidget(self.button_J)
        self.button_Q = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('Queen'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_Q.setFont(font)
        self.button_Q.setEnabled(False)
        self.button_Q.setObjectName("button_Q")
        self.horizontalLayout.addWidget(self.button_Q)
        self.button_K = QtWidgets.QPushButton(self.horizontalLayoutWidget, clicked = lambda : self.pressed_it('King'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(20)
        self.button_K.setFont(font)
        self.button_K.setEnabled(False)
        self.button_K.setObjectName("button_K")
        self.horizontalLayout.addWidget(self.button_K)
        self.deck_overview = QtWidgets.QGroupBox(self.centralwidget)
        self.deck_overview.setGeometry(QtCore.QRect(20, 70, 721, 301))
        self.deck_overview.setObjectName("deck_overview")
        self.deck_board = QtWidgets.QHBoxLayout(self.deck_overview)
        self.deck_board.setContentsMargins(1, -1, 0, -1)
        self.deck_board.setSpacing(7)
        self.deck_board.setObjectName("deck_board")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.deck_board.addItem(spacerItem)
        self.column_ace = QtWidgets.QVBoxLayout()
        self.column_ace.setSpacing(0)
        self.column_ace.setObjectName("column_ace")
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_ace.addItem(spacerItem1)
        self.diamond_ace = QtWidgets.QLabel(self.deck_overview)
        self.diamond_ace.setText("")
        self.diamond_ace.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_ace.setObjectName("diamond_ace")
        self.column_ace.addWidget(self.diamond_ace)
        self.club_ace = QtWidgets.QLabel(self.deck_overview)
        self.club_ace.setText("")
        self.club_ace.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_ace.setObjectName("club_ace")
        self.column_ace.addWidget(self.club_ace)
        self.heart_ace = QtWidgets.QLabel(self.deck_overview)
        self.heart_ace.setText("")
        self.heart_ace.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_ace.setObjectName("heart_ace")
        self.column_ace.addWidget(self.heart_ace)
        self.spade_ace = QtWidgets.QLabel(self.deck_overview)
        self.spade_ace.setText("")
        self.spade_ace.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_ace.setObjectName("spade_ace")
        self.column_ace.addWidget(self.spade_ace)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_ace.addItem(spacerItem2)
        self.deck_board.addLayout(self.column_ace)
        self.column_2 = QtWidgets.QVBoxLayout()
        self.column_2.setSpacing(0)
        self.column_2.setObjectName("column_2")
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_2.addItem(spacerItem3)
        self.diamond_2 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_2.setText("")
        self.diamond_2.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_2.setObjectName("diamond_2")
        self.column_2.addWidget(self.diamond_2)
        self.club_2 = QtWidgets.QLabel(self.deck_overview)
        self.club_2.setText("")
        self.club_2.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_2.setObjectName("club_2")
        self.column_2.addWidget(self.club_2)
        self.heart_2 = QtWidgets.QLabel(self.deck_overview)
        self.heart_2.setText("")
        self.heart_2.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_2.setObjectName("heart_2")
        self.column_2.addWidget(self.heart_2)
        self.spade_2 = QtWidgets.QLabel(self.deck_overview)
        self.spade_2.setText("")
        self.spade_2.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_2.setObjectName("spade_2")
        self.column_2.addWidget(self.spade_2)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_2.addItem(spacerItem4)
        self.deck_board.addLayout(self.column_2)
        self.column_3 = QtWidgets.QVBoxLayout()
        self.column_3.setSpacing(0)
        self.column_3.setObjectName("column_3")
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_3.addItem(spacerItem5)
        self.diamond_3 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_3.setText("")
        self.diamond_3.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_3.setObjectName("diamond_3")
        self.column_3.addWidget(self.diamond_3)
        self.club_3 = QtWidgets.QLabel(self.deck_overview)
        self.club_3.setText("")
        self.club_3.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_3.setObjectName("club_3")
        self.column_3.addWidget(self.club_3)
        self.heart_3 = QtWidgets.QLabel(self.deck_overview)
        self.heart_3.setText("")
        self.heart_3.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_3.setObjectName("heart_3")
        self.column_3.addWidget(self.heart_3)
        self.spade_3 = QtWidgets.QLabel(self.deck_overview)
        self.spade_3.setText("")
        self.spade_3.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_3.setObjectName("spade_3")
        self.column_3.addWidget(self.spade_3)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_3.addItem(spacerItem6)
        self.deck_board.addLayout(self.column_3)
        self.column_4 = QtWidgets.QVBoxLayout()
        self.column_4.setSpacing(0)
        self.column_4.setObjectName("column_4")
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_4.addItem(spacerItem7)
        self.diamond_4 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_4.setText("")
        self.diamond_4.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_4.setObjectName("diamond_4")
        self.column_4.addWidget(self.diamond_4)
        self.club_4 = QtWidgets.QLabel(self.deck_overview)
        self.club_4.setText("")
        self.club_4.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_4.setObjectName("club_4")
        self.column_4.addWidget(self.club_4)
        self.heart_4 = QtWidgets.QLabel(self.deck_overview)
        self.heart_4.setText("")
        self.heart_4.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_4.setObjectName("heart_4")
        self.column_4.addWidget(self.heart_4)
        self.spade_4 = QtWidgets.QLabel(self.deck_overview)
        self.spade_4.setText("")
        self.spade_4.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_4.setObjectName("spade_4")
        self.column_4.addWidget(self.spade_4)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_4.addItem(spacerItem8)
        self.deck_board.addLayout(self.column_4)
        self.column_5 = QtWidgets.QVBoxLayout()
        self.column_5.setSpacing(0)
        self.column_5.setObjectName("column_5")
        spacerItem9 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_5.addItem(spacerItem9)
        self.diamond_5 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_5.setText("")
        self.diamond_5.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_5.setObjectName("diamond_5")
        self.column_5.addWidget(self.diamond_5)
        self.club_5 = QtWidgets.QLabel(self.deck_overview)
        self.club_5.setText("")
        self.club_5.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_5.setObjectName("club_5")
        self.column_5.addWidget(self.club_5)
        self.heart_5 = QtWidgets.QLabel(self.deck_overview)
        self.heart_5.setText("")
        self.heart_5.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_5.setObjectName("heart_5")
        self.column_5.addWidget(self.heart_5)
        self.spade_5 = QtWidgets.QLabel(self.deck_overview)
        self.spade_5.setText("")
        self.spade_5.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_5.setObjectName("spade_5")
        self.column_5.addWidget(self.spade_5)
        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_5.addItem(spacerItem10)
        self.deck_board.addLayout(self.column_5)
        self.column_6 = QtWidgets.QVBoxLayout()
        self.column_6.setSpacing(0)
        self.column_6.setObjectName("column_6")
        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_6.addItem(spacerItem11)
        self.diamond_6 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_6.setText("")
        self.diamond_6.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_6.setObjectName("diamond_6")
        self.column_6.addWidget(self.diamond_6)
        self.club_6 = QtWidgets.QLabel(self.deck_overview)
        self.club_6.setText("")
        self.club_6.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_6.setObjectName("club_6")
        self.column_6.addWidget(self.club_6)
        self.heart_6 = QtWidgets.QLabel(self.deck_overview)
        self.heart_6.setText("")
        self.heart_6.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_6.setObjectName("heart_6")
        self.column_6.addWidget(self.heart_6)
        self.spade_6 = QtWidgets.QLabel(self.deck_overview)
        self.spade_6.setText("")
        self.spade_6.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_6.setObjectName("spade_6")
        self.column_6.addWidget(self.spade_6)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_6.addItem(spacerItem12)
        self.deck_board.addLayout(self.column_6)
        self.column_7 = QtWidgets.QVBoxLayout()
        self.column_7.setSpacing(0)
        self.column_7.setObjectName("column_7")
        spacerItem13 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_7.addItem(spacerItem13)
        self.diamond_7 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_7.setText("")
        self.diamond_7.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_7.setObjectName("diamond_7")
        self.column_7.addWidget(self.diamond_7)
        self.club_7 = QtWidgets.QLabel(self.deck_overview)
        self.club_7.setText("")
        self.club_7.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_7.setObjectName("club_7")
        self.column_7.addWidget(self.club_7)
        self.heart_7 = QtWidgets.QLabel(self.deck_overview)
        self.heart_7.setText("")
        self.heart_7.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_7.setObjectName("heart_7")
        self.column_7.addWidget(self.heart_7)
        self.spade_7 = QtWidgets.QLabel(self.deck_overview)
        self.spade_7.setText("")
        self.spade_7.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_7.setObjectName("spade_7")
        self.column_7.addWidget(self.spade_7)
        spacerItem14 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_7.addItem(spacerItem14)
        self.deck_board.addLayout(self.column_7)
        self.column_8 = QtWidgets.QVBoxLayout()
        self.column_8.setSpacing(0)
        self.column_8.setObjectName("column_8")
        spacerItem15 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_8.addItem(spacerItem15)
        self.diamond_8 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_8.setText("")
        self.diamond_8.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_8.setObjectName("diamond_8")
        self.column_8.addWidget(self.diamond_8)
        self.club_8 = QtWidgets.QLabel(self.deck_overview)
        self.club_8.setText("")
        self.club_8.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_8.setObjectName("club_8")
        self.column_8.addWidget(self.club_8)
        self.heart_8 = QtWidgets.QLabel(self.deck_overview)
        self.heart_8.setText("")
        self.heart_8.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_8.setObjectName("heart_8")
        self.column_8.addWidget(self.heart_8)
        self.spade_8 = QtWidgets.QLabel(self.deck_overview)
        self.spade_8.setText("")
        self.spade_8.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_8.setObjectName("spade_8")
        self.column_8.addWidget(self.spade_8)
        spacerItem16 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_8.addItem(spacerItem16)
        self.deck_board.addLayout(self.column_8)
        self.column_9 = QtWidgets.QVBoxLayout()
        self.column_9.setSpacing(0)
        self.column_9.setObjectName("column_9")
        spacerItem17 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_9.addItem(spacerItem17)
        self.diamond_9 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_9.setText("")
        self.diamond_9.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_9.setObjectName("diamond_9")
        self.column_9.addWidget(self.diamond_9)
        self.club_9 = QtWidgets.QLabel(self.deck_overview)
        self.club_9.setText("")
        self.club_9.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_9.setObjectName("club_9")
        self.column_9.addWidget(self.club_9)
        self.heart_9 = QtWidgets.QLabel(self.deck_overview)
        self.heart_9.setText("")
        self.heart_9.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_9.setObjectName("heart_9")
        self.column_9.addWidget(self.heart_9)
        self.spade_9 = QtWidgets.QLabel(self.deck_overview)
        self.spade_9.setText("")
        self.spade_9.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_9.setObjectName("spade_9")
        self.column_9.addWidget(self.spade_9)
        spacerItem18 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_9.addItem(spacerItem18)
        self.deck_board.addLayout(self.column_9)
        self.column_10 = QtWidgets.QVBoxLayout()
        self.column_10.setSpacing(0)
        self.column_10.setObjectName("column_10")
        spacerItem19 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_10.addItem(spacerItem19)
        self.diamond_10 = QtWidgets.QLabel(self.deck_overview)
        self.diamond_10.setText("")
        self.diamond_10.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_10.setObjectName("diamond_10")
        self.column_10.addWidget(self.diamond_10)
        self.club_10 = QtWidgets.QLabel(self.deck_overview)
        self.club_10.setText("")
        self.club_10.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_10.setObjectName("club_10")
        self.column_10.addWidget(self.club_10)
        self.heart_10 = QtWidgets.QLabel(self.deck_overview)
        self.heart_10.setText("")
        self.heart_10.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_10.setObjectName("heart_10")
        self.column_10.addWidget(self.heart_10)
        self.spade_10 = QtWidgets.QLabel(self.deck_overview)
        self.spade_10.setText("")
        self.spade_10.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_10.setObjectName("spade_10")
        self.column_10.addWidget(self.spade_10)
        spacerItem20 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_10.addItem(spacerItem20)
        self.deck_board.addLayout(self.column_10)
        self.column_jack = QtWidgets.QVBoxLayout()
        self.column_jack.setSpacing(0)
        self.column_jack.setObjectName("column_jack")
        spacerItem21 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_jack.addItem(spacerItem21)
        self.diamond_jack = QtWidgets.QLabel(self.deck_overview)
        self.diamond_jack.setText("")
        self.diamond_jack.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_jack.setObjectName("diamond_jack")
        self.column_jack.addWidget(self.diamond_jack)
        self.club_jack = QtWidgets.QLabel(self.deck_overview)
        self.club_jack.setText("")
        self.club_jack.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_jack.setObjectName("club_jack")
        self.column_jack.addWidget(self.club_jack)
        self.heart_jack = QtWidgets.QLabel(self.deck_overview)
        self.heart_jack.setText("")
        self.heart_jack.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_jack.setObjectName("heart_jack")
        self.column_jack.addWidget(self.heart_jack)
        self.spade_jack = QtWidgets.QLabel(self.deck_overview)
        self.spade_jack.setText("")
        self.spade_jack.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_jack.setObjectName("spade_jack")
        self.column_jack.addWidget(self.spade_jack)
        spacerItem22 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_jack.addItem(spacerItem22)
        self.deck_board.addLayout(self.column_jack)
        self.column_queen = QtWidgets.QVBoxLayout()
        self.column_queen.setSpacing(0)
        self.column_queen.setObjectName("column_queen")
        spacerItem23 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_queen.addItem(spacerItem23)
        self.diamond_queen = QtWidgets.QLabel(self.deck_overview)
        self.diamond_queen.setText("")
        self.diamond_queen.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_queen.setObjectName("diamond_queen")
        self.column_queen.addWidget(self.diamond_queen)
        self.club_queen = QtWidgets.QLabel(self.deck_overview)
        self.club_queen.setText("")
        self.club_queen.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_queen.setObjectName("club_queen")
        self.column_queen.addWidget(self.club_queen)
        self.heart_queen = QtWidgets.QLabel(self.deck_overview)
        self.heart_queen.setText("")
        self.heart_queen.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_queen.setObjectName("heart_queen")
        self.column_queen.addWidget(self.heart_queen)
        self.spade_queen = QtWidgets.QLabel(self.deck_overview)
        self.spade_queen.setText("")
        self.spade_queen.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_queen.setObjectName("spade_queen")
        self.column_queen.addWidget(self.spade_queen)
        spacerItem24 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_queen.addItem(spacerItem24)
        self.deck_board.addLayout(self.column_queen)
        self.column_king = QtWidgets.QVBoxLayout()
        self.column_king.setSpacing(0)
        self.column_king.setObjectName("column_king")
        spacerItem25 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_king.addItem(spacerItem25)
        self.diamond_king = QtWidgets.QLabel(self.deck_overview)
        self.diamond_king.setText("")
        self.diamond_king.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.diamond_king.setObjectName("diamond_king")
        self.column_king.addWidget(self.diamond_king)
        self.club_king = QtWidgets.QLabel(self.deck_overview)
        self.club_king.setText("")
        self.club_king.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.club_king.setObjectName("club_king")
        self.column_king.addWidget(self.club_king)
        self.heart_king = QtWidgets.QLabel(self.deck_overview)
        self.heart_king.setText("")
        self.heart_king.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.heart_king.setObjectName("heart_king")
        self.column_king.addWidget(self.heart_king)
        self.spade_king = QtWidgets.QLabel(self.deck_overview)
        self.spade_king.setText("")
        self.spade_king.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))
        self.spade_king.setObjectName("spade_king")
        self.column_king.addWidget(self.spade_king)
        spacerItem26 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.column_king.addItem(spacerItem26)
        self.deck_board.addLayout(self.column_king)
        spacerItem27 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.deck_board.addItem(spacerItem27)
        self.pulled_card = QtWidgets.QLabel(self.centralwidget)
        self.pulled_card.setGeometry(QtCore.QRect(750, 70, 196, 300))
        self.pulled_card.setText("")
        self.pulled_card.setPixmap(QtGui.QPixmap("medium_deck/green_back.png"))
        self.pulled_card.setObjectName("pulled_card")
        self.plaats_voor_grafiek = QtWidgets.QGroupBox(self.centralwidget)
        self.plaats_voor_grafiek.setGeometry(QtCore.QRect(19, 489, 711, 231))
        self.plaats_voor_grafiek.setObjectName("plaats_voor_grafiek")
        self.message_box = QtWidgets.QTextBrowser(self.centralwidget)
        self.message_box.setGeometry(QtCore.QRect(750, 540, 191, 191))
        self.message_box.setObjectName("message_box")
        self.verticalGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.verticalGroupBox.setGeometry(QtCore.QRect(750, 380, 191, 101))
        self.verticalGroupBox.setObjectName("verticalGroupBox")
        self.setting_box = QtWidgets.QVBoxLayout(self.verticalGroupBox)
        self.setting_box.setSpacing(0)
        self.setting_box.setObjectName("setting_box")
        self.enable_tracking = QtWidgets.QCheckBox(self.verticalGroupBox, toggled= lambda : self.pressed_it('tracking'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.enable_tracking.setFont(font)
        self.enable_tracking.setEnabled(False)
        self.enable_tracking.setObjectName("enable_tracking")
        self.setting_box.addWidget(self.enable_tracking)
        self.enable_hints = QtWidgets.QCheckBox(self.verticalGroupBox, toggled= lambda : self.pressed_it('hints'))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.enable_hints.setFont(font)
        self.enable_hints.setEnabled(False)
        self.enable_hints.setObjectName("enable_hints")
        self.setting_box.addWidget(self.enable_hints)
        self.beer_counter = QtWidgets.QHBoxLayout()
        self.beer_counter.setObjectName("beer_counter")
        spacerItem28 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.beer_counter.addItem(spacerItem28)
        self.beer_counter_text = QtWidgets.QLabel(self.verticalGroupBox)
        self.beer_counter_text.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        font.setBold(False)
        font.setUnderline(True)

        self.beer_counter_text.setFont(font)
        self.beer_counter_text.setObjectName("beer_counter_text")
        self.beer_counter.addWidget(self.beer_counter_text)
        spacerItem29 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.beer_counter.addItem(spacerItem29)
        self.setting_box.addLayout(self.beer_counter)
        self.counts_box = QtWidgets.QHBoxLayout()
        self.counts_box.setObjectName("counts_box")
        spacerItem30 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.counts_box.addItem(spacerItem30)
        self.User_name = QtWidgets.QLabel(self.verticalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.User_name.setFont(font)
        self.User_name.setObjectName("User_name")
        self.counts_box.addWidget(self.User_name)
        spacerItem31 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.counts_box.addItem(spacerItem31)
        self.User_count = QtWidgets.QLabel(self.verticalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        self.User_count.setFont(font)
        self.User_count.setObjectName("User_count")
        self.counts_box.addWidget(self.User_count)
        spacerItem32 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.counts_box.addItem(spacerItem32)
        self.Computer_name = QtWidgets.QLabel(self.verticalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        font.setItalic(False)
        self.Computer_name.setFont(font)
        self.Computer_name.setObjectName("Computer_name")
        self.counts_box.addWidget(self.Computer_name)
        spacerItem33 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.counts_box.addItem(spacerItem33)
        self.Computer_count = QtWidgets.QLabel(self.verticalGroupBox)
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(10)
        font.setItalic(False)
        self.Computer_count.setFont(font)
        self.Computer_count.setObjectName("Computer_count")
        self.counts_box.addWidget(self.Computer_count)
        spacerItem34 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.counts_box.addItem(spacerItem34)
        self.setting_box.addLayout(self.counts_box)
        FuckdeDealer.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(FuckdeDealer)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 959, 21))
        self.menubar.setObjectName("menubar")
        FuckdeDealer.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(FuckdeDealer)
        self.statusbar.setObjectName("statusbar")
        FuckdeDealer.setStatusBar(self.statusbar)

        # Graphing settings
        self.graphWidget = pg.PlotWidget(self.centralwidget)
        self.graphWidget.setGeometry(QtCore.QRect(19, 489, 711, 231))
        self.graphWidget.setObjectName("graphWidget")
        color = self.graphWidget.palette().color(QtGui.QPalette.Window)  # Get the default window background,
        self.graphWidget.setBackground(color)
        self.graphWidget.setTitle('Counts of all cards still in deck', size='15pt', height=2)
        styles = {'color':'r', 'font-size':'14px'}
        self.graphWidget.setLabel('left', 'Pick chance (%)', **styles)
        self.graphWidget.setLabel('right', 'Counts', **styles)
        self.graphWidget.setLabel('bottom', '', **styles)
        self.graphWidget.setXRange(0, 12, padding=0.05)
        self.graphWidget.setYRange(0, 4, padding=0)
        self.graphWidget.hideButtons()

        # set x axis as string
        ranks_string = dict(enumerate(['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']))
        stringaxis = self.graphWidget.getAxis('bottom')
        stringaxis2 = self.graphWidget.getAxis('left')
        stringaxis.setTicks([ranks_string.items()])
        percentages = dict(enumerate(['0', f'{1/13*1/4*100:.1f}', f'{1/13*1/2*100:.1f}', f'{1/13*3/4*100:.1f}', f'{1/13*100:.1f}']))
        stringaxis2.setTicks([percentages.items()])

        # initial plotting
        ranks = range(13)
        counts =  [4]*13
        self.bar_graph = pg.BarGraphItem(x=ranks, height=0, width=0.6)
        self.graphWidget.addItem(self.bar_graph)

        self.highlight_bar = pg.BarGraphItem(x=ranks, height=0, width=0.6, brush='r')
        self.graphWidget.addItem(self.highlight_bar)

        self.retranslateUi(FuckdeDealer)
        QtCore.QMetaObject.connectSlotsByName(FuckdeDealer)

    def retranslateUi(self, FuckdeDealer):
        _translate = QtCore.QCoreApplication.translate
        FuckdeDealer.setWindowTitle(_translate("FuckdeDealer", "MainWindow"))
        self.fuckdedealertitle.setText(_translate("FuckdeDealer", "Fuck the dealer (single player)"))
        self.button_Start.setText(_translate("FuckdeDealer", "Start"))
        self.button_Exit.setText(_translate("FuckdeDealer", "Exit"))
        self.button_Auto.setText(_translate("FuckdeDealer", "Auto"))
        self.button_Stop.setText(_translate("FuckdeDealer", "Stop"))
        self.button_A.setText(_translate("FuckdeDealer", "A"))
        self.button_2.setText(_translate("FuckdeDealer", "2"))
        self.button_3.setText(_translate("FuckdeDealer", "3"))
        self.button_4.setText(_translate("FuckdeDealer", "4"))
        self.button_5.setText(_translate("FuckdeDealer", "5"))
        self.button_6.setText(_translate("FuckdeDealer", "6"))
        self.button_7.setText(_translate("FuckdeDealer", "7"))
        self.button_8.setText(_translate("FuckdeDealer", "8"))
        self.button_9.setText(_translate("FuckdeDealer", "9"))
        self.button_10.setText(_translate("FuckdeDealer", "10"))
        self.button_J.setText(_translate("FuckdeDealer", "J"))
        self.button_Q.setText(_translate("FuckdeDealer", "Q"))
        self.button_K.setText(_translate("FuckdeDealer", "K"))
        self.plaats_voor_grafiek.setTitle(_translate("FuckdeDealer", "Grafiek"))
        self.enable_tracking.setText(_translate("FuckdeDealer", "Enable live tracking"))
        self.enable_hints.setText(_translate("FuckdeDealer", "Enable hints"))
        self.beer_counter_text.setText(_translate("FuckdeDealer", "Beer counter"))
        self.User_name.setText(_translate("FuckdeDealer", "User:"))
        self.User_count.setText(_translate("FuckdeDealer", "0"))
        self.Computer_name.setText(_translate("FuckdeDealer", "Computer:"))
        self.Computer_count.setText(_translate("FuckdeDealer", "0"))


    # defines actions when buttons are pressed
    def pressed_it(self, name):
        if name == 'Start':
            self.start_game(auto=False, pausetime=2500)
        elif name == 'Auto':
            self.start_game(auto=True, pausetime=50)
        elif name == 'Stop':
            self.end_game()
        elif name == 'Exit':
            sys.exit()
        elif name == 'tracking':
            if self.enable_tracking.isChecked() == True:
                self.enable_hints.setEnabled(True)
                self.update_plot(self.game.cards)
            elif self.enable_tracking.isChecked() == False:
                self.enable_hints.setEnabled(False)
                self.enable_hints.setChecked(False)
                self.bar_graph.setOpts(height=0, width=0.8)
        elif name == 'hints':
            widgets = (self.horizontalLayout.itemAt(i).widget() for i in range(self.horizontalLayout.count())) # list of all buttons
            if self.enable_hints.isChecked() == True:
                if self.round_bool == True:
                    self.highlight_1st(self.game.cards)
                elif self.round_bool == False:
                    self.highlight_2nd(self.game.cards, self.first_guess, self.picked)                    
                    self.greyout_buttons()

            elif self.enable_hints.isChecked() == False:
                self.highlight_bar.setOpts(height=0, width=0.8)
                for widget in widgets:
                    widget.setEnabled(True)
                    widget.setStyleSheet('QPushButton {color: black}')
        else:
            self.last_button = name

    # greys out all buttons not possible
    def greyout_buttons(self):
        widgets = (self.horizontalLayout.itemAt(i).widget() for i in range(self.horizontalLayout.count()))
        if self.enable_hints.isChecked() == True and self.round_bool == False:
            for widget in widgets:
                if ((self.picked.numrank > rank2int(self.first_guess)) and (rank2int(widget.text()) < rank2int(self.first_guess))) or rank2int(widget.text()) == rank2int(self.first_guess):
                    widget.setEnabled(False)
                elif ((self.picked.numrank < rank2int(self.first_guess)) and (rank2int(widget.text()) > rank2int(self.first_guess))) or rank2int(widget.text()) == rank2int(self.first_guess):
                    widget.setEnabled(False)
                else:
                    widget.setEnabled(True)

    # adds a beer to the counter for either user or computer
    def add_beer(self, who, amount):
        if who == 'Computer':
            self.Computer_count.setText(str(int(self.Computer_count.text()) + amount))
        elif  who == 'User':
            self.User_count.setText(str(int(self.User_count.text()) + amount))

    # updates the big board by revealing one card
    def update_board(self, card):
        col_name = 'column_' + card.rank.lower()
        card_name = card.color.lower() + '_' + card.rank.lower()
        
        #widgets = (self.deck_overview.itemAt(i) for i in range(self.deck_overview.count())) 
        widgets = self.deck_overview.findChildren(QtWidgets.QLabel)
        for w in widgets:
            if w.objectName() == card_name:
                w.setPixmap(QtGui.QPixmap("small_deck/"+card.filename))

    # updates the plot
    def update_plot(self, deck):
        if self.enable_tracking.isChecked() == True:
            new_counts = list(deck.counts().values())
            self.bar_graph.setOpts(height=new_counts, width=0.8)

    # highlights the best first pick
    def highlight_1st(self, deck):
        if self.enable_hints.isChecked() == True:
            best_pick, best_counts = self.game.best_firstguess(deck)
            best_pick = best_pick - 1
            self.highlight_bar.setOpts(x = [best_pick], height=[best_counts], width=0.8, brush='r')
            self.highlight_button(int(best_pick))

    # highlights the best second picks
    def highlight_2nd(self, deck, first_guess, picked):
        if self.enable_hints.isChecked() == True:
            best_picks, best_counts = self.game.best_secondguess(deck, first_guess, self.picked)
            best_picks = best_picks - 1
            self.highlight_bar.setOpts(x = list(best_picks), height=list(best_counts), width=0.8, brush='r')
            self.highlight_button(best_picks)

    def highlight_button(self, best_picks):
        widgets = (self.horizontalLayout.itemAt(i).widget() for i in range(self.horizontalLayout.count()))
        for w in widgets:
            if self.enable_hints.isChecked() == True:
                if isinstance(best_picks, int):
                    if rank2int(w.text()) == best_picks + 1:
                        w.setStyleSheet('QPushButton {color: red}')
                    else:
                        w.setStyleSheet('QPushButton {color: black}')
                else:
                    if rank2int(w.text()) in list(best_picks + 1):
                        w.setStyleSheet('QPushButton {color: red}')
                    else:
                        w.setStyleSheet('QPushButton {color: black}')

    # can be used to moderate user input via an event loop
    def requesting_guess(self):

        # Enable all buttons for user input
        widgets = (self.horizontalLayout.itemAt(i).widget() for i in range(self.horizontalLayout.count()))
        if self.enable_hints.isChecked() == True and self.round_bool == False:
            self.greyout_buttons()
        else:
            for widget in widgets:
                widget.setEnabled(True)
                

        # loop until a button is clicked
        loop = QtCore.QEventLoop()
        self.button_2.clicked.connect(loop.exit)
        self.button_3.clicked.connect(loop.exit)
        self.button_4.clicked.connect(loop.exit)
        self.button_5.clicked.connect(loop.exit)
        self.button_6.clicked.connect(loop.exit)
        self.button_7.clicked.connect(loop.exit)
        self.button_8.clicked.connect(loop.exit)
        self.button_9.clicked.connect(loop.exit)
        self.button_10.clicked.connect(loop.exit)
        self.button_J.clicked.connect(loop.exit)
        self.button_Q.clicked.connect(loop.exit)
        self.button_K.clicked.connect(loop.exit)
        self.button_A.clicked.connect(loop.exit)
        loop.exec_()

        # Lock all buttons after one chosen
        widgets = (self.horizontalLayout.itemAt(i).widget() for i in range(self.horizontalLayout.count())) 
        for widget in widgets:
            widget.setEnabled(False)

        return self.last_button

    def end_game(self):
        if int(self.User_count.text()) > int(self.Computer_count.text()):
            winner = 'Computer'
        else:
            winner = 'You'
        widgets = (self.horizontalLayout.itemAt(i).widget() for i in range(self.horizontalLayout.count())) 
        for w in widgets:
            w.setEnabled(False)

        self.message_box.setHtml(f'<p style="font-size: 14px">Game is over!</p>')
        self.message_box.append(f'<p style="font-size: 14px"><b>{winner}</b> won the game.</p>')
        self.message_box.append(f'<p style="font-size: 14px">Play again?</p>')
        self.enable_tracking.setEnabled(False)
        self.enable_tracking.setChecked(False)
        self.enable_hints.setEnabled(False)
        self.enable_hints.setChecked(False)
        self.button_Start.setText('Play again')
        self.button_Start.setEnabled(True)
        self.button_Auto.setEnabled(True)
        self.button_Stop.setEnabled(False)

    # starts the game
    def start_game(self, auto=False, pausetime=2500):
        self.game = Game()

        if auto == False:
            self.button_Stop.setEnabled(True)
        elif auto == True:
            self.button_Stop.setEnabled(False)
        self.enable_tracking.setEnabled(True)
        self.button_Start.setEnabled(False)
        self.button_Auto.setEnabled(False)
        self.User_count.setText('0')
        self.Computer_count.setText('0')
        self.message_box.setHtml('<p style="font-size: 14px">Welcome to Fuck the Dealer!</p>')

        # reset the board to all card backs
        widgets = self.deck_overview.findChildren(QtWidgets.QLabel)
        for w in widgets:
            w.setPixmap(QtGui.QPixmap("small_deck/gray_back.png"))

        QtTest.QTest.qWait(2000)

        for i in range(len(self.game.cards.deck_list)):

            # reset pulled card and text in box
            self.pulled_card.setPixmap(QtGui.QPixmap("medium_deck/green_back.png"))
            self.message_box.setHtml('<p style="font-size: 14px">A <b>random</b> card has been picked from the deck.</p>')
            self.message_box.append('<p style="font-size: 14px">Please make a guess...</p>')
            
            # first round
            self.round_bool = True

            if auto == False:
                self.first_guess = self.requesting_guess()
            elif auto == True:
                self.first_guess = self.game.best_firstguess(self.game.cards)[0]

            self.picked, result = self.game.first_round(self.first_guess)
            self.message_box.setHtml(f'<p style="font-size: 14px">Your pick was <b>{self.first_guess}</b>.</p>')
            if result == True:
                self.message_box.append(f'<p style="font-size: 14px;color: green"><b>Correct!</b></p>')
                self.pulled_card.setPixmap(QtGui.QPixmap("medium_deck/"+self.picked.filename))

                QtTest.QTest.qWait(pausetime)
                self.game.cards.remove(self.picked.rank, self.picked.color)

                self.add_beer('Computer', 2)
                self.update_board(self.picked)
                self.update_plot(self.game.cards)
                self.highlight_1st(self.game.cards)
                continue
            else:
                self.message_box.append(f'<p style="font-size: 14px; color: red"><b>Incorrect!</b></p>')
                self.message_box.append(f'<p style="font-size: 14px">please choose a <b>{result}</b> card...</p>')

                self.highlight_2nd(self.game.cards, self.first_guess, self.picked)

            # second round
            self.round_bool = False

            if auto == False:
                self.second_guess = self.requesting_guess()
            elif auto == True:
                guesslist = self.game.best_secondguess(self.game.cards, self.first_guess, self.picked)[0]
                self.second_guess = random.choice(guesslist)

            self.picked, result = self.game.second_round(self.second_guess, self.picked)
            self.message_box.append(f'<p style="font-size: 14px">Your pick was <b>{self.second_guess}</b>.</p>')
            if result == True:
                self.message_box.append(f'<p style="font-size: 14px;color: green"><b>Correct!</b></p>')
                self.pulled_card.setPixmap(QtGui.QPixmap("medium_deck/"+self.picked.filename))

                QtTest.QTest.qWait(pausetime)
                self.game.cards.remove(self.picked.rank, self.picked.color)

                self.add_beer('Computer', 1)
                self.update_board(self.picked)
                self.update_plot(self.game.cards)
                self.highlight_1st(self.game.cards)
                continue
            else:
                self.message_box.append(f'<p style="font-size: 14px; color: red"><b>Incorrect!</b></p>')
                self.message_box.append(f'<p style="font-size: 14px">The card was <b>{self.picked.rank} of {self.picked.color}s</b>.</p>')
                self.pulled_card.setPixmap(QtGui.QPixmap("medium_deck/"+self.picked.filename))

                QtTest.QTest.qWait(pausetime)
                self.game.cards.remove(self.picked.rank, self.picked.color)

                self.add_beer('User', 1)
                self.update_board(self.picked)
                self.update_plot(self.game.cards)
                self.highlight_1st(self.game.cards)
                continue

        self.end_game()
        """
        if int(self.User_count.text()) > int(self.Computer_count.text()):
            winner = 'Computer'
        else:
            winner = 'You'
        widgets = (self.horizontalLayout.itemAt(i).widget() for i in range(self.horizontalLayout.count())) 
        for w in widgets:
            w.setEnabled(False)

        self.message_box.setHtml(f'<p style="font-size: 14px">Game is over!</p>')
        self.message_box.append(f'<p style="font-size: 14px"><b>{winner}</b> won the game.</p>')
        self.message_box.append(f'<p style="font-size: 14px">Play again?</p>')
        self.enable_tracking.setEnabled(False)
        self.enable_tracking.setChecked(False)
        self.enable_hints.setEnabled(False)
        self.enable_hints.setChecked(False)
        self.button_Start.setText('Play again')
        self.button_Start.setEnabled(True)
        self.button_Auto.setEnabled(True)
        """

def rank2int(rank):
    try: 
        converter = {'Ace': 1, 'A' : 1, 'Jack' : 11,'J' : 11, 'Queen' : 12, 'Q' : 12, 'King' : 13, 'K' :13}
        return converter[rank]
    except:
        return int(rank)


if __name__ == "__main__":
    import sys
    import threading
    import time
    app = QtWidgets.QApplication(sys.argv)
    FuckdeDealer = QtWidgets.QMainWindow()
    ui = Ui_FuckdeDealer()
    ui.setupUi(FuckdeDealer)
    FuckdeDealer.show()
    sys.exit(app.exec_())


